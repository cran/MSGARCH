#include "MSgarch.h"

//=========================================================================//
//=========================================================================//
//================================== gjrGARCH ==================================//
//=========================================================================//
//=========================================================================//
RCPP_MODULE(gjrGARCH){   
  
  // gjrGARCH-norm-symmetric
  class_<gjrGARCH_norm_sym>("gjrGARCH_norm_sym")  
	.constructor()
	.field( "name",        &gjrGARCH_norm_sym ::name )
	.field( "theta0",      &gjrGARCH_norm_sym ::theta0 )
	.field( "Sigma0",      &gjrGARCH_norm_sym ::Sigma0 )
	.field( "label",       &gjrGARCH_norm_sym ::label )
	.field( "lower",       &gjrGARCH_norm_sym ::lower )
	.field( "upper",       &gjrGARCH_norm_sym ::upper )
	.field( "ineq_lb",     &gjrGARCH_norm_sym ::ineq_lb )
	.field( "ineq_ub",     &gjrGARCH_norm_sym ::ineq_ub )
	.field( "NbParams",    &gjrGARCH_norm_sym ::NbParams )
	.field( "NbParamsModel",&gjrGARCH_norm_sym ::NbParamsModel)
	.method( "f_sim",      &gjrGARCH_norm_sym ::f_sim )
	.method( "f_pdf",      &gjrGARCH_norm_sym ::f_pdf )
 .method( "f_pdf_its",  &gjrGARCH_norm_sym ::f_pdf_its )
	.method( "f_cdf",      &gjrGARCH_norm_sym ::f_cdf )
 .method( "f_cdf_its",  &gjrGARCH_norm_sym ::f_cdf_its )
	.method( "f_rnd",      &gjrGARCH_norm_sym ::f_rnd )
	.method( "calc_ht",    &gjrGARCH_norm_sym ::calc_ht )
	.method( "eval_model", &gjrGARCH_norm_sym ::eval_model )
	.method( "ineq_func",  &gjrGARCH_norm_sym ::ineq_func )
	.method( "f_unc_vol",  &gjrGARCH_norm_sym ::f_unc_vol)
  ;
  // gjrGARCH-std-symmetric
  class_<gjrGARCH_std_sym>("gjrGARCH_std_sym")  
    .constructor()
    .field( "name",        &gjrGARCH_std_sym ::name )
    .field( "theta0",      &gjrGARCH_std_sym ::theta0 )
    .field( "Sigma0",      &gjrGARCH_std_sym ::Sigma0 )
    .field( "label",       &gjrGARCH_std_sym ::label )
    .field( "lower",       &gjrGARCH_std_sym ::lower )
    .field( "upper",       &gjrGARCH_std_sym ::upper )
    .field( "ineq_lb",     &gjrGARCH_std_sym ::ineq_lb )
    .field( "ineq_ub",     &gjrGARCH_std_sym ::ineq_ub )
    .field( "NbParams",    &gjrGARCH_std_sym ::NbParams )
	.field( "NbParamsModel",&gjrGARCH_std_sym ::NbParamsModel)
    .method( "f_sim",      &gjrGARCH_std_sym ::f_sim )
    .method( "f_pdf",      &gjrGARCH_std_sym ::f_pdf )
    .method( "f_pdf_its",  &gjrGARCH_std_sym ::f_pdf_its )
    .method( "f_cdf",      &gjrGARCH_std_sym ::f_cdf )
    .method( "f_cdf_its",  &gjrGARCH_std_sym ::f_cdf_its )
    .method( "f_rnd",      &gjrGARCH_std_sym ::f_rnd )
    .method( "calc_ht",    &gjrGARCH_std_sym ::calc_ht )
    .method( "eval_model", &gjrGARCH_std_sym ::eval_model )
    .method( "ineq_func",  &gjrGARCH_std_sym ::ineq_func )
    .method( "f_unc_vol",  &gjrGARCH_std_sym ::f_unc_vol)
  ;
  // gjrGARCH-ged-symmetric
  class_<gjrGARCH_ged_sym>("gjrGARCH_ged_sym")  
    .constructor()
    .field( "name",        &gjrGARCH_ged_sym ::name )
    .field( "theta0",      &gjrGARCH_ged_sym ::theta0 )
    .field( "Sigma0",      &gjrGARCH_ged_sym ::Sigma0 )
    .field( "label",       &gjrGARCH_ged_sym ::label )
    .field( "lower",       &gjrGARCH_ged_sym ::lower )
    .field( "upper",       &gjrGARCH_ged_sym ::upper )
    .field( "ineq_lb",     &gjrGARCH_ged_sym ::ineq_lb )
    .field( "ineq_ub",     &gjrGARCH_ged_sym ::ineq_ub )
    .field( "NbParams",    &gjrGARCH_ged_sym ::NbParams )
	.field( "NbParamsModel",&gjrGARCH_ged_sym ::NbParamsModel)
    .method( "f_sim",      &gjrGARCH_ged_sym ::f_sim )
    .method( "f_pdf",      &gjrGARCH_ged_sym ::f_pdf )
    .method( "f_pdf_its",  &gjrGARCH_ged_sym ::f_pdf_its )
    .method( "f_cdf",      &gjrGARCH_ged_sym ::f_cdf )
    .method( "f_cdf_its",  &gjrGARCH_ged_sym ::f_cdf_its )
    .method( "f_rnd",      &gjrGARCH_ged_sym ::f_rnd )
    .method( "calc_ht",    &gjrGARCH_ged_sym ::calc_ht )
    .method( "eval_model", &gjrGARCH_ged_sym ::eval_model )
    .method( "ineq_func",  &gjrGARCH_ged_sym ::ineq_func )
    .method( "f_unc_vol",  &gjrGARCH_ged_sym ::f_unc_vol)
  ;
  
  
   
  // gjrGARCH-norm-skew
  class_<gjrGARCH_norm_skew>("gjrGARCH_norm_skew")  
	.constructor()
	.field( "name",        &gjrGARCH_norm_skew ::name )
	.field( "theta0",      &gjrGARCH_norm_skew ::theta0 )
	.field( "Sigma0",      &gjrGARCH_norm_skew ::Sigma0 )
	.field( "label",       &gjrGARCH_norm_skew ::label )
	.field( "lower",       &gjrGARCH_norm_skew ::lower )
	.field( "upper",       &gjrGARCH_norm_skew ::upper )
	.field( "ineq_lb",     &gjrGARCH_norm_skew ::ineq_lb )
	.field( "ineq_ub",     &gjrGARCH_norm_skew ::ineq_ub )
	.field( "NbParams",    &gjrGARCH_norm_skew ::NbParams )
	.field( "NbParamsModel",&gjrGARCH_norm_skew ::NbParamsModel)
	.method( "f_sim",      &gjrGARCH_norm_skew ::f_sim )
	.method( "f_pdf",      &gjrGARCH_norm_skew ::f_pdf )
 .method( "f_pdf_its",  &gjrGARCH_norm_skew ::f_pdf_its )
	.method( "f_cdf",      &gjrGARCH_norm_skew ::f_cdf )
 .method( "f_cdf_its",  &gjrGARCH_norm_skew ::f_cdf_its )
	.method( "f_rnd",      &gjrGARCH_norm_skew ::f_rnd )
	.method( "calc_ht",    &gjrGARCH_norm_skew ::calc_ht )
	.method( "eval_model", &gjrGARCH_norm_skew ::eval_model )
	.method( "ineq_func",  &gjrGARCH_norm_skew ::ineq_func )
	.method( "f_unc_vol",  &gjrGARCH_norm_skew ::f_unc_vol)
  ;
  // gjrGARCH-std-skew
  class_<gjrGARCH_std_skew>("gjrGARCH_std_skew")  
    .constructor()
    .field( "name",        &gjrGARCH_std_skew ::name )
    .field( "theta0",      &gjrGARCH_std_skew ::theta0 )
    .field( "Sigma0",      &gjrGARCH_std_skew ::Sigma0 )
    .field( "label",       &gjrGARCH_std_skew ::label )
    .field( "lower",       &gjrGARCH_std_skew ::lower )
    .field( "upper",       &gjrGARCH_std_skew ::upper )
    .field( "ineq_lb",     &gjrGARCH_std_skew ::ineq_lb )
    .field( "ineq_ub",     &gjrGARCH_std_skew ::ineq_ub )
    .field( "NbParams",    &gjrGARCH_std_skew ::NbParams )
	.field( "NbParamsModel",&gjrGARCH_std_skew ::NbParamsModel)
    .method( "f_sim",      &gjrGARCH_std_skew ::f_sim )
    .method( "f_pdf",      &gjrGARCH_std_skew ::f_pdf )
    .method( "f_pdf_its",  &gjrGARCH_std_skew ::f_pdf_its )
    .method( "f_cdf",      &gjrGARCH_std_skew ::f_cdf )
    .method( "f_cdf_its",  &gjrGARCH_std_skew ::f_cdf_its )
    .method( "f_rnd",      &gjrGARCH_std_skew ::f_rnd )
    .method( "calc_ht",    &gjrGARCH_std_skew ::calc_ht )
    .method( "eval_model", &gjrGARCH_std_skew ::eval_model )
    .method( "ineq_func",  &gjrGARCH_std_skew ::ineq_func )
    .method( "f_unc_vol",  &gjrGARCH_std_skew ::f_unc_vol)
  ;
  // gjrGARCH-ged-skew
  class_<gjrGARCH_ged_skew>("gjrGARCH_ged_skew")  
    .constructor()
    .field( "name",        &gjrGARCH_ged_skew ::name )
    .field( "theta0",      &gjrGARCH_ged_skew ::theta0 )
    .field( "Sigma0",      &gjrGARCH_ged_skew ::Sigma0 )
    .field( "label",       &gjrGARCH_ged_skew ::label )
    .field( "lower",       &gjrGARCH_ged_skew ::lower )
    .field( "upper",       &gjrGARCH_ged_skew ::upper )
    .field( "ineq_lb",     &gjrGARCH_ged_skew ::ineq_lb )
    .field( "ineq_ub",     &gjrGARCH_ged_skew ::ineq_ub )
    .field( "NbParams",    &gjrGARCH_ged_skew ::NbParams )
	.field( "NbParamsModel",&gjrGARCH_ged_skew ::NbParamsModel)
    .method( "f_sim",      &gjrGARCH_ged_skew ::f_sim )
    .method( "f_pdf",      &gjrGARCH_ged_skew ::f_pdf )
    .method( "f_pdf_its",  &gjrGARCH_ged_skew ::f_pdf_its )
    .method( "f_cdf",      &gjrGARCH_ged_skew ::f_cdf )
    .method( "f_cdf_its",  &gjrGARCH_ged_skew ::f_cdf_its )
    .method( "f_rnd",      &gjrGARCH_ged_skew ::f_rnd )
    .method( "calc_ht",    &gjrGARCH_ged_skew ::calc_ht )
    .method( "eval_model", &gjrGARCH_ged_skew ::eval_model )
    .method( "ineq_func",  &gjrGARCH_ged_skew ::ineq_func )
    .method( "f_unc_vol",  &gjrGARCH_ged_skew ::f_unc_vol)
  ;
}
